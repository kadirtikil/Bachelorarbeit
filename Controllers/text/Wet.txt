Die Erweiterbarkeit, Wartbarkeit und Testbarkeit spielen in der Funktionalen-Programmierung eine wichtige Rolle.
Durch die geringe granularität des Codes ist es möglich, diesen besser und schneller nachzuvollziehen.
Desweiteren ist dadurch ein einfaches testen des Codes möglich.

Im folgenden ist ein Beispiel, welches imperativ und danach funktional programmiert wurde.

**Imperativ** 
```javascript
// Imperativer Ansatz
function processNumbersImperative(numbers) {
    let result = [];
    for (let i = 0; i < numbers.length; i++) {
    if (numbers[i] % 2 !== 0) { // Check ob Zahl ungerade ist
        result.push(numbers[i] * numbers[i]); // Quadriere die Zahl
    }
    }
    return result;
}

// Output
const numbers = [1, 2, 3, 4, 5];
console.log(processNumbersImperative(numbers)); // => [1, 9, 25]


```

**Funktional** 

```javascript
// Funktionaler Ansatz
function processNumbersFunctional(numbers) {
  return numbers
    .filter(n => n % 2 !== 0) // Filtere die gerade Zahlen
    .map(n => n * n);         // Quadriere die übrigen Zahlen
}

// Output
const numbers = [1, 2, 3, 4, 5];
console.log(processNumbersFunctional(numbers)); // => [1, 9, 25]


```
