A Function that will always deliver the same output if given the same input,and therefore has no side effect on the mutation of data. An example for this:

```
const xs = [1,2,3,4,5];

// pure
xs.slice(0,3); // [1,2,3]

xs.slice(0,3); // [1,2,3]

xs.slice(0,3); // [1,2,3]


// impure
xs.splice(0,3); // [1,2,3]

xs.splice(0,3); // [4,5]

xs.splice(0,3); // []
``` 
splice leaves a problem for use here because of the alternating changes it has in its output.

Another example for pure/impure functions:

```
// impure
let minimum = 21;
const checkAge = age => age >= minimum;

// pure
const checkAge = (age) => {
  const minimum = 21;
  return age >= minimum;
};
```
The first function is impure because "minimum" is mutable and therefore can potentially deliver non desired outputs.

Pure functions in Functional Programming are mathematical function, which is what Functional Programming is all about. With benefits like: